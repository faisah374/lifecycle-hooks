# -*- coding: utf-8 -*-
"""lifecycle-hooks13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJDwc0Nh7FB8qy2DnjtpFK95Jrp9jsvp
"""

# !pip install -Uq openai-agents
import asyncio
# nest_asyncio.apply()
from agents import(
    Agent,
    Runner,
    AsyncOpenAI,
    OpenAIChatCompletionsModel,
     set_default_openai_client, set_tracing_disabled,
    RunContextWrapper, AgentHooks, Runner, Tool, function_tool
)
# from google.colab import userdata
import os
import asyncio
import random
from typing import Any

from pydantic import BaseModel




gemini_api_key = os.getenv("GEMINI_API_KEY")

external_client=AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
    )
model=OpenAIChatCompletionsModel(
openai_client=external_client,
model="gemini-2.0-flash",
    )
set_default_openai_client(external_client)
set_tracing_disabled(True)


class  TestAgHooks(AgentHooks):
      def __init__(self, ag_display_name):
        self.event_counter = 0
        self.ag_display_name = ag_display_name

      async def on_start(self, context: RunContextWrapper, agent: Agent) -> None:
        self.event_counter += 1
        print(f"### {self.ag_display_name} {self.event_counter}: Agent {agent.name} started. Usage: {context.usage}")

      async def on_end(self, context: RunContextWrapper, agent: Agent, output: Any) -> None:
        self.event_counter += 1
        print(f"### {self.ag_display_name} {self.event_counter}: Agent {agent.name} ended. Usage: {context.usage}, Output: {output}")
start_agent = Agent(
     name="Content Moderator Agent",
     instructions="You are content moderation agent. Watch social media content received and flag queries that need help or answer. We will answer anything about AI?",
     hooks=TestAgHooks(ag_display_name="content_moderator"),
    model=model
)

async def main():
  result = await Runner.run(
      start_agent,
      input=f"Will Agentic AI Die at end of 2025?."
  )

  print(result.final_output)

asyncio.run(main())
print("--end--")

